package co.rsk.metrics.block.builder;

import co.rsk.config.TestSystemProperties;
import co.rsk.core.RskAddress;
import co.rsk.metrics.block.ValueGenerator;
import co.rsk.metrics.block.builder.metadata.MetadataWriter;
import co.rsk.metrics.block.tests.TestContext;
import co.rsk.test.builders.TransactionBuilder;
import jdk.nashorn.internal.codegen.CompilerConstants;
import org.bouncycastle.util.encoders.Hex;
import org.ethereum.core.Account;
import org.ethereum.core.CallTransaction;
import org.ethereum.core.Transaction;
import org.ethereum.crypto.ECKey;
import org.ethereum.crypto.HashUtil;

import java.math.BigInteger;
import java.util.*;

public class MockTransactionsBuilder {


    private long maxTrxsPerBlock;
    private BigInteger minGasPrice, txGasLimit, tokenGasLimit;
    private ValueGenerator valueGenerator;
    private Vector<AccountStatus> accounts;
    private int tokenTrx, normalTrx;
    private TestSystemProperties config;
    private MetadataWriter writer;
    private Map<String, Account> accountCache;
    private Vector<RskAddress> tokens;
    private AccountStatus tokensOwner;

    public MockTransactionsBuilder(long maxTrxPerBlock, BigInteger minGasPrice, BigInteger txGasLimit, BigInteger tokenGasLimit, ValueGenerator datasource, Vector<AccountStatus> accounts, TestSystemProperties config, AccountStatus tokensOwner, MetadataWriter writer) {
        this.maxTrxsPerBlock = maxTrxPerBlock;
        this.minGasPrice = minGasPrice;
        this.txGasLimit = txGasLimit;
        this.tokenGasLimit = tokenGasLimit;
        this.valueGenerator = datasource;
        this.accounts = accounts;
        this.config = config;
        this.writer = writer;
        this.accountCache = new HashMap<>();
        this.tokensOwner = tokensOwner;
    }
    //Gas per regular trx 21000
    //Block Gas limit 3141592
    //100% usage = 149 trx
    //50% usage = 74 trx
    //10% usage = 14 trx

    //Force 80% of transactions be done between the first 20% of the generated accounts

    //Regular transactions 50% of total transactions
    //If 100% block is used, that represents a total of 148 trxs
    //50% is 74 trxs, 80% of those transactions (59) must be performed by a group composed of 20% of the total accounts (200).
    //The rest 20% of the transactions (15) must be performed by the rest of the accounts (800)

    //80% of the transactions, performed between accounts belonging to a 20% of the total accounts

    public List<Transaction> generateTransactions(Transaction angelTrx) {

        tokenTrx = new Double(Math.floor(maxTrxsPerBlock / 2.0)).intValue();
        normalTrx = tokenTrx;


        if (normalTrx + tokenTrx < maxTrxsPerBlock) {
            normalTrx++;
        }

        //logger.info("Generating {} block transactions", maxTrxsPerBlock);
        List<Transaction> trxs = new ArrayList<>();
        long eightyPercTrxs = Math.round(Math.floor(maxTrxsPerBlock * 0.8));
        long twentyPercTrxs = Math.round(Math.ceil(maxTrxsPerBlock * 0.2));

        // logger.info("Total transactions to create {}", maxTrxsPerBlock);
        if (eightyPercTrxs + twentyPercTrxs < maxTrxsPerBlock) {
            twentyPercTrxs++;
        }
        //logger.info("80% is {} and 20% is {}", eightyPercTrxs, twentyPercTrxs);

        //logger.info("normalTrxs {} and tokenTrxs{}", normalTrx, tokenTrx);
        for (int i = 0; i < eightyPercTrxs; i++) {
            TransactionData tData = selectParticipants(true);
            Transaction tx = generateTransaction(tData);
            //tx.verify();
            trxs.add(tx);
        }

        //20% of the transactions is performed by 80 % of the accounts
        for (int i = 0; i < twentyPercTrxs; i++) {
            TransactionData tData = selectParticipants(false);
            Transaction tx = generateTransaction(tData);
            //tx.verify();
            trxs.add(tx);
        }


        //TODO REMOVE ANGEL TRANSACTION

        if(angelTrx != null){

            System.out.println("ADDING ANGEL TRX in block");

            Transaction tx = CallTransaction.createCallTransaction(config, 7, 1, 9999999999L,
                    angelTrx.getContractAddress(), 0, CallTransaction.Function.fromSignature("create",  "uint"), "16");

            Account account = getAccount("TokenCreatorAccount");
            tx.sign(account.getEcKey().getPrivKeyBytes());
            trxs.add(tx);
        }

        return trxs;
    }


    public List<Transaction> generateAngelContractTransaction(String generatorAccountName){
        String created = "608060405234801561001057600080fd5b506040516020806100ef8339810180604052810190808051906020019092919050505080600081905550602a60018190555050609e806100516000396000f300608060405260043610603f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680638381f58a146044575b600080fd5b348015604f57600080fd5b506056606c565b6040518082815260200191505060405180910390f35b600054815600a165627a7a72305820417243c4c75c47ab5eed9fb900852858c7cb65372a0b8a1477ab63f3062dd7670029";
        String creator = "608060405234801561001057600080fd5b5061040e806100206000396000f300608060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680633b3546c81461005c57806361bc221a1461009d578063780900dc146100c8575b600080fd5b34801561006857600080fd5b50610087600480360381019080803590602001909291905050506100f5565b6040518082815260200191505060405180910390f35b3480156100a957600080fd5b506100b2610228565b6040518082815260200191505060405180910390f35b3480156100d457600080fd5b506100f36004803603810190808035906020019092919050505061022e565b005b600080600080600080805490509350600091505b8582101561020c5783600154830181151561012057fe5b06905060008181548110151561013257fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638381f58a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156101c057600080fd5b505af11580156101d4573d6000803e3d6000fd5b505050506040513d60208110156101ea57600080fd5b8101908080519060200190929190505050830192508180600101925050610109565b8160016000828254019250508190555082945050505050919050565b60015481565b60008090505b818110156102e05760008142016102496102e4565b80828152602001915050604051809103906000f08015801561026f573d6000803e3d6000fd5b5090806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550508080600101915050610234565b5050565b60405160ef806102f4833901905600608060405234801561001057600080fd5b506040516020806100ef8339810180604052810190808051906020019092919050505080600081905550602a60018190555050609e806100516000396000f300608060405260043610603f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680638381f58a146044575b600080fd5b348015604f57600080fd5b506056606c565b6040518082815260200191505060405180910390f35b600054815600a165627a7a72305820417243c4c75c47ab5eed9fb900852858c7cb65372a0b8a1477ab63f3062dd7670029a165627a7a723058200197233e025d62aa2a4e316493f329b41ec1027a7c3cf2e55b288734c1f5c3e20029";
        Account generator = getAccount(generatorAccountName);
        BigInteger nonce = BigInteger.valueOf(5);
        List<Transaction> result = new ArrayList<>(2);
        //Transaction trx = CallTransaction.createRawTransaction(config, nonce.longValue(), 1, 9999999999L, RskAddress.nullAddress(), 50000, Hex.decode(code));
        Transaction trx =  Transaction.create(config, null, BigInteger.ZERO, nonce, BigInteger.ONE, new BigInteger("9999999999"), Hex.decode(created));
        trx.sign(generator.getEcKey().getPrivKeyBytes());
        result.add(trx);

        nonce = nonce.add(BigInteger.ONE);
        trx =  Transaction.create(config, null, BigInteger.ZERO, nonce, BigInteger.ONE, new BigInteger("9999999999"), Hex.decode(creator));
        trx.sign(generator.getEcKey().getPrivKeyBytes());
        result.add(trx);
        System.out.println("Creator: " +  trx.getContractAddress());


        return result;

    }


    public List<Transaction> generateTokenCreationTransactions(String generatorAccountName){


        Account generator = getAccount(generatorAccountName);

        List<Transaction> trxs = new ArrayList<>(5);
        BigInteger balance = BigInteger.ZERO;



        //TokenA
        String code = "60806040523480156200001157600080fd5b5060006040805190810160405280600781526020017f546f6b656e204100000000000000000000000000000000000000000000000000815250600390805190602001906200006192919062000270565b506040805190810160405280600381526020017f544b41000000000000000000000000000000000000000000000000000000000081525060049080519060200190620000af92919062000270565b5073687e279ec75ee5dd1bdab8dbbd26c5038099f9359050620000e8816509184e72a000620000ef640100000000026401000000009004565b506200031f565b60008273ffffffffffffffffffffffffffffffffffffffff16141515156200011657600080fd5b6200013b816002546200024e64010000000002620010dd179091906401000000009004565b600281905550620001a2816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546200024e64010000000002620010dd179091906401000000009004565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b60008082840190508381101515156200026657600080fd5b8091505092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002b357805160ff1916838001178555620002e4565b82800160010185558215620002e4579182015b82811115620002e3578251825591602001919060010190620002c6565b5b509050620002f39190620002f7565b5090565b6200031c91905b8082111562000318576000816000905550600101620002fe565b5090565b90565b61112a806200032f6000396000f3006080604052600436106100af576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063095ea7b3146100b457806318160ddd1461011957806323b872dd14610144578063313ce567146101c957806339509351146101fa57806370a082311461025f578063a457c2d7146102b6578063a9059cbb1461031b578063b09f126614610380578063d28d885214610410578063dd62ed3e146104a0575b600080fd5b3480156100c057600080fd5b506100ff600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610517565b604051808215151515815260200191505060405180910390f35b34801561012557600080fd5b5061012e610644565b6040518082815260200191505060405180910390f35b34801561015057600080fd5b506101af600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061064e565b604051808215151515815260200191505060405180910390f35b3480156101d557600080fd5b506101de610800565b604051808260ff1660ff16815260200191505060405180910390f35b34801561020657600080fd5b50610245600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610813565b604051808215151515815260200191505060405180910390f35b34801561026b57600080fd5b506102a0600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a4a565b6040518082815260200191505060405180910390f35b3480156102c257600080fd5b50610301600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610a92565b604051808215151515815260200191505060405180910390f35b34801561032757600080fd5b50610366600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610cc9565b604051808215151515815260200191505060405180910390f35b34801561038c57600080fd5b50610395610ce0565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103d55780820151818401526020810190506103ba565b50505050905090810190601f1680156104025780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561041c57600080fd5b50610425610d7e565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561046557808201518184015260208101905061044a565b50505050905090810190601f1680156104925780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156104ac57600080fd5b50610501600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e1c565b6040518082815260200191505060405180910390f35b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561055457600080fd5b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600254905090565b6000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156106db57600080fd5b61076a82600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610ea390919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506107f5848484610ec4565b600190509392505050565b600560009054906101000a900460ff1681565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561085057600080fd5b6108df82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546110dd90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610acf57600080fd5b610b5e82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610ea390919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000610cd6338484610ec4565b6001905092915050565b60048054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d765780601f10610d4b57610100808354040283529160200191610d76565b820191906000526020600020905b815481529060010190602001808311610d5957829003601f168201915b505050505081565b60038054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610e145780601f10610de957610100808354040283529160200191610e14565b820191906000526020600020905b815481529060010190602001808311610df757829003601f168201915b505050505081565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600080838311151515610eb557600080fd5b82840390508091505092915050565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548111151515610f1157600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515610f4d57600080fd5b610f9e816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610ea390919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611031816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546110dd90919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b60008082840190508381101515156110f457600080fd5b80915050929150505600a165627a7a723058200aafcee15c2a0805123eb08a12037ff1167279b34f63b542b8e797eed5b8f4860029";
        BigInteger nonce = BigInteger.ZERO;
        Transaction tx  =  generateTokenCreationTransaction(generator, nonce, balance, code);
        trxs.add(tx);

        //TokenB
        code = "60806040523480156200001157600080fd5b5060006040805190810160405280600781526020017f546f6b656e204200000000000000000000000000000000000000000000000000815250600390805190602001906200006192919062000270565b506040805190810160405280600381526020017f544b42000000000000000000000000000000000000000000000000000000000081525060049080519060200190620000af92919062000270565b5073687e279ec75ee5dd1bdab8dbbd26c5038099f9359050620000e8816509184e72a000620000ef640100000000026401000000009004565b506200031f565b60008273ffffffffffffffffffffffffffffffffffffffff16141515156200011657600080fd5b6200013b816002546200024e64010000000002620010dd179091906401000000009004565b600281905550620001a2816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546200024e64010000000002620010dd179091906401000000009004565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b60008082840190508381101515156200026657600080fd5b8091505092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002b357805160ff1916838001178555620002e4565b82800160010185558215620002e4579182015b82811115620002e3578251825591602001919060010190620002c6565b5b509050620002f39190620002f7565b5090565b6200031c91905b8082111562000318576000816000905550600101620002fe565b5090565b90565b61112a806200032f6000396000f3006080604052600436106100af576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063095ea7b3146100b457806318160ddd1461011957806323b872dd14610144578063313ce567146101c957806339509351146101fa57806370a082311461025f578063a457c2d7146102b6578063a9059cbb1461031b578063b09f126614610380578063d28d885214610410578063dd62ed3e146104a0575b600080fd5b3480156100c057600080fd5b506100ff600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610517565b604051808215151515815260200191505060405180910390f35b34801561012557600080fd5b5061012e610644565b6040518082815260200191505060405180910390f35b34801561015057600080fd5b506101af600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061064e565b604051808215151515815260200191505060405180910390f35b3480156101d557600080fd5b506101de610800565b604051808260ff1660ff16815260200191505060405180910390f35b34801561020657600080fd5b50610245600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610813565b604051808215151515815260200191505060405180910390f35b34801561026b57600080fd5b506102a0600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a4a565b6040518082815260200191505060405180910390f35b3480156102c257600080fd5b50610301600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610a92565b604051808215151515815260200191505060405180910390f35b34801561032757600080fd5b50610366600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610cc9565b604051808215151515815260200191505060405180910390f35b34801561038c57600080fd5b50610395610ce0565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103d55780820151818401526020810190506103ba565b50505050905090810190601f1680156104025780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561041c57600080fd5b50610425610d7e565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561046557808201518184015260208101905061044a565b50505050905090810190601f1680156104925780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156104ac57600080fd5b50610501600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e1c565b6040518082815260200191505060405180910390f35b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561055457600080fd5b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600254905090565b6000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156106db57600080fd5b61076a82600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610ea390919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506107f5848484610ec4565b600190509392505050565b600560009054906101000a900460ff1681565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561085057600080fd5b6108df82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546110dd90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610acf57600080fd5b610b5e82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610ea390919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000610cd6338484610ec4565b6001905092915050565b60048054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d765780601f10610d4b57610100808354040283529160200191610d76565b820191906000526020600020905b815481529060010190602001808311610d5957829003601f168201915b505050505081565b60038054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610e145780601f10610de957610100808354040283529160200191610e14565b820191906000526020600020905b815481529060010190602001808311610df757829003601f168201915b505050505081565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600080838311151515610eb557600080fd5b82840390508091505092915050565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548111151515610f1157600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515610f4d57600080fd5b610f9e816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610ea390919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611031816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546110dd90919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b60008082840190508381101515156110f457600080fd5b80915050929150505600a165627a7a72305820f3c502fa9857368f80b090d262add54da6b80d7e484e62230adc995a47a2f42e0029";
        nonce = nonce.add(BigInteger.ONE);
        tx  =  generateTokenCreationTransaction(generator, nonce, balance, code);
        trxs.add(tx);

        //TokenC
        code = "60806040523480156200001157600080fd5b5060006040805190810160405280600781526020017f546f6b656e204300000000000000000000000000000000000000000000000000815250600390805190602001906200006192919062000270565b506040805190810160405280600381526020017f544b43000000000000000000000000000000000000000000000000000000000081525060049080519060200190620000af92919062000270565b5073687e279ec75ee5dd1bdab8dbbd26c5038099f9359050620000e8816509184e72a000620000ef640100000000026401000000009004565b506200031f565b60008273ffffffffffffffffffffffffffffffffffffffff16141515156200011657600080fd5b6200013b816002546200024e64010000000002620010dd179091906401000000009004565b600281905550620001a2816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546200024e64010000000002620010dd179091906401000000009004565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b60008082840190508381101515156200026657600080fd5b8091505092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002b357805160ff1916838001178555620002e4565b82800160010185558215620002e4579182015b82811115620002e3578251825591602001919060010190620002c6565b5b509050620002f39190620002f7565b5090565b6200031c91905b8082111562000318576000816000905550600101620002fe565b5090565b90565b61112a806200032f6000396000f3006080604052600436106100af576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063095ea7b3146100b457806318160ddd1461011957806323b872dd14610144578063313ce567146101c957806339509351146101fa57806370a082311461025f578063a457c2d7146102b6578063a9059cbb1461031b578063b09f126614610380578063d28d885214610410578063dd62ed3e146104a0575b600080fd5b3480156100c057600080fd5b506100ff600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610517565b604051808215151515815260200191505060405180910390f35b34801561012557600080fd5b5061012e610644565b6040518082815260200191505060405180910390f35b34801561015057600080fd5b506101af600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061064e565b604051808215151515815260200191505060405180910390f35b3480156101d557600080fd5b506101de610800565b604051808260ff1660ff16815260200191505060405180910390f35b34801561020657600080fd5b50610245600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610813565b604051808215151515815260200191505060405180910390f35b34801561026b57600080fd5b506102a0600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a4a565b6040518082815260200191505060405180910390f35b3480156102c257600080fd5b50610301600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610a92565b604051808215151515815260200191505060405180910390f35b34801561032757600080fd5b50610366600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610cc9565b604051808215151515815260200191505060405180910390f35b34801561038c57600080fd5b50610395610ce0565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103d55780820151818401526020810190506103ba565b50505050905090810190601f1680156104025780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561041c57600080fd5b50610425610d7e565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561046557808201518184015260208101905061044a565b50505050905090810190601f1680156104925780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156104ac57600080fd5b50610501600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e1c565b6040518082815260200191505060405180910390f35b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561055457600080fd5b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600254905090565b6000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156106db57600080fd5b61076a82600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610ea390919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506107f5848484610ec4565b600190509392505050565b600560009054906101000a900460ff1681565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561085057600080fd5b6108df82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546110dd90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610acf57600080fd5b610b5e82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610ea390919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000610cd6338484610ec4565b6001905092915050565b60048054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d765780601f10610d4b57610100808354040283529160200191610d76565b820191906000526020600020905b815481529060010190602001808311610d5957829003601f168201915b505050505081565b60038054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610e145780601f10610de957610100808354040283529160200191610e14565b820191906000526020600020905b815481529060010190602001808311610df757829003601f168201915b505050505081565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600080838311151515610eb557600080fd5b82840390508091505092915050565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548111151515610f1157600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515610f4d57600080fd5b610f9e816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610ea390919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611031816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546110dd90919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b60008082840190508381101515156110f457600080fd5b80915050929150505600a165627a7a723058206aa8eaad27b199ca23ab6d75881244eaeda6600784f3def37c429a6cf96466bd0029";
        nonce = nonce.add(BigInteger.ONE);
        tx  =  generateTokenCreationTransaction(generator, nonce, balance, code);
        trxs.add(tx);

        //TokenD
        code = "60806040523480156200001157600080fd5b5060006040805190810160405280600781526020017f546f6b656e204400000000000000000000000000000000000000000000000000815250600390805190602001906200006192919062000270565b506040805190810160405280600381526020017f544b44000000000000000000000000000000000000000000000000000000000081525060049080519060200190620000af92919062000270565b5073687e279ec75ee5dd1bdab8dbbd26c5038099f9359050620000e8816509184e72a000620000ef640100000000026401000000009004565b506200031f565b60008273ffffffffffffffffffffffffffffffffffffffff16141515156200011657600080fd5b6200013b816002546200024e64010000000002620010dd179091906401000000009004565b600281905550620001a2816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546200024e64010000000002620010dd179091906401000000009004565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b60008082840190508381101515156200026657600080fd5b8091505092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002b357805160ff1916838001178555620002e4565b82800160010185558215620002e4579182015b82811115620002e3578251825591602001919060010190620002c6565b5b509050620002f39190620002f7565b5090565b6200031c91905b8082111562000318576000816000905550600101620002fe565b5090565b90565b61112a806200032f6000396000f3006080604052600436106100af576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063095ea7b3146100b457806318160ddd1461011957806323b872dd14610144578063313ce567146101c957806339509351146101fa57806370a082311461025f578063a457c2d7146102b6578063a9059cbb1461031b578063b09f126614610380578063d28d885214610410578063dd62ed3e146104a0575b600080fd5b3480156100c057600080fd5b506100ff600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610517565b604051808215151515815260200191505060405180910390f35b34801561012557600080fd5b5061012e610644565b6040518082815260200191505060405180910390f35b34801561015057600080fd5b506101af600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061064e565b604051808215151515815260200191505060405180910390f35b3480156101d557600080fd5b506101de610800565b604051808260ff1660ff16815260200191505060405180910390f35b34801561020657600080fd5b50610245600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610813565b604051808215151515815260200191505060405180910390f35b34801561026b57600080fd5b506102a0600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a4a565b6040518082815260200191505060405180910390f35b3480156102c257600080fd5b50610301600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610a92565b604051808215151515815260200191505060405180910390f35b34801561032757600080fd5b50610366600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610cc9565b604051808215151515815260200191505060405180910390f35b34801561038c57600080fd5b50610395610ce0565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103d55780820151818401526020810190506103ba565b50505050905090810190601f1680156104025780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561041c57600080fd5b50610425610d7e565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561046557808201518184015260208101905061044a565b50505050905090810190601f1680156104925780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156104ac57600080fd5b50610501600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e1c565b6040518082815260200191505060405180910390f35b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561055457600080fd5b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600254905090565b6000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156106db57600080fd5b61076a82600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610ea390919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506107f5848484610ec4565b600190509392505050565b600560009054906101000a900460ff1681565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561085057600080fd5b6108df82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546110dd90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610acf57600080fd5b610b5e82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610ea390919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000610cd6338484610ec4565b6001905092915050565b60048054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d765780601f10610d4b57610100808354040283529160200191610d76565b820191906000526020600020905b815481529060010190602001808311610d5957829003601f168201915b505050505081565b60038054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610e145780601f10610de957610100808354040283529160200191610e14565b820191906000526020600020905b815481529060010190602001808311610df757829003601f168201915b505050505081565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600080838311151515610eb557600080fd5b82840390508091505092915050565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548111151515610f1157600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515610f4d57600080fd5b610f9e816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610ea390919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611031816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546110dd90919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b60008082840190508381101515156110f457600080fd5b80915050929150505600a165627a7a723058209eadf429466c1d0a1d87857b03d52ac5e4d835f4165e0eb4caa3f40459b8fff30029";
        nonce = nonce.add(BigInteger.ONE);
        tx  =  generateTokenCreationTransaction(generator, nonce, balance, code);
        trxs.add(tx);

        //TokenE
        code = "60806040523480156200001157600080fd5b5060006040805190810160405280600781526020017f546f6b656e204500000000000000000000000000000000000000000000000000815250600390805190602001906200006192919062000270565b506040805190810160405280600381526020017f544b45000000000000000000000000000000000000000000000000000000000081525060049080519060200190620000af92919062000270565b5073687e279ec75ee5dd1bdab8dbbd26c5038099f9359050620000e8816509184e72a000620000ef640100000000026401000000009004565b506200031f565b60008273ffffffffffffffffffffffffffffffffffffffff16141515156200011657600080fd5b6200013b816002546200024e64010000000002620010dd179091906401000000009004565b600281905550620001a2816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546200024e64010000000002620010dd179091906401000000009004565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b60008082840190508381101515156200026657600080fd5b8091505092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002b357805160ff1916838001178555620002e4565b82800160010185558215620002e4579182015b82811115620002e3578251825591602001919060010190620002c6565b5b509050620002f39190620002f7565b5090565b6200031c91905b8082111562000318576000816000905550600101620002fe565b5090565b90565b61112a806200032f6000396000f3006080604052600436106100af576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063095ea7b3146100b457806318160ddd1461011957806323b872dd14610144578063313ce567146101c957806339509351146101fa57806370a082311461025f578063a457c2d7146102b6578063a9059cbb1461031b578063b09f126614610380578063d28d885214610410578063dd62ed3e146104a0575b600080fd5b3480156100c057600080fd5b506100ff600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610517565b604051808215151515815260200191505060405180910390f35b34801561012557600080fd5b5061012e610644565b6040518082815260200191505060405180910390f35b34801561015057600080fd5b506101af600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061064e565b604051808215151515815260200191505060405180910390f35b3480156101d557600080fd5b506101de610800565b604051808260ff1660ff16815260200191505060405180910390f35b34801561020657600080fd5b50610245600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610813565b604051808215151515815260200191505060405180910390f35b34801561026b57600080fd5b506102a0600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a4a565b6040518082815260200191505060405180910390f35b3480156102c257600080fd5b50610301600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610a92565b604051808215151515815260200191505060405180910390f35b34801561032757600080fd5b50610366600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610cc9565b604051808215151515815260200191505060405180910390f35b34801561038c57600080fd5b50610395610ce0565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103d55780820151818401526020810190506103ba565b50505050905090810190601f1680156104025780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561041c57600080fd5b50610425610d7e565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561046557808201518184015260208101905061044a565b50505050905090810190601f1680156104925780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156104ac57600080fd5b50610501600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e1c565b6040518082815260200191505060405180910390f35b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561055457600080fd5b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600254905090565b6000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156106db57600080fd5b61076a82600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610ea390919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506107f5848484610ec4565b600190509392505050565b600560009054906101000a900460ff1681565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561085057600080fd5b6108df82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546110dd90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610acf57600080fd5b610b5e82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610ea390919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000610cd6338484610ec4565b6001905092915050565b60048054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d765780601f10610d4b57610100808354040283529160200191610d76565b820191906000526020600020905b815481529060010190602001808311610d5957829003601f168201915b505050505081565b60038054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610e145780601f10610de957610100808354040283529160200191610e14565b820191906000526020600020905b815481529060010190602001808311610df757829003601f168201915b505050505081565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600080838311151515610eb557600080fd5b82840390508091505092915050565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548111151515610f1157600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515610f4d57600080fd5b610f9e816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610ea390919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611031816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546110dd90919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b60008082840190508381101515156110f457600080fd5b80915050929150505600a165627a7a72305820ef1e11cf7cd04510b23134052faa9230251fec5fea6cdb2be9099c77853d18b80029";
        nonce = nonce.add(BigInteger.ONE);
        tx  =  generateTokenCreationTransaction(generator, nonce, balance, code);
        trxs.add(tx);

        return trxs;

    }



    public List<List<Transaction>> generateTokenPreAssignmentTransactions(Vector<AccountStatus> accounts){


        List<List<Transaction>> result = new ArrayList<>();
        List<Transaction> trxs = new ArrayList<>();


        int includedTrx = 0;
        int maxTrxForPreAssignment = 149; //maxTrxsPerBlock;

        for (AccountStatus tokenRecipient: accounts) {
            for(RskAddress tokenAddr: tokens){
                Transaction tx = generateTokenPreAssignmentTransaction(tokenRecipient, tokenAddr);
                trxs.add(tx);
                includedTrx++;
                if(includedTrx>=maxTrxForPreAssignment){
                    result.add(trxs);
                    trxs = new ArrayList<>();
                    includedTrx = 0;
                }
            }

        }

        return  result;
    }


    private Transaction generateTokenCreationTransaction(Account creator, BigInteger nonce, BigInteger balance, String code){
        //Transaction trx = CallTransaction.createRawTransaction(config, nonce.longValue(), 1, 9999999999L, RskAddress.nullAddress(), 50000, Hex.decode(code));

        Transaction trx =  Transaction.create(config, null, balance, nonce, BigInteger.ONE, new BigInteger("9999999999"), Hex.decode(code));
        trx.sign(creator.getEcKey().getPrivKeyBytes());
        return trx;
    }

    public void setTokenContracts(Vector<RskAddress> contracts){
        this.tokens = contracts;
    }


    private Transaction generateTokenPreAssignmentTransaction(AccountStatus tokenRecipient, RskAddress tokenAddr) {

        int trxValue = 1000000;

        long nonce = tokensOwner.nextNonce().longValue();

        Transaction tx = CallTransaction.createCallTransaction(config, nonce, minGasPrice.longValue(), tokenGasLimit.longValue(),
                        tokenAddr, 0, CallTransaction.Function.fromSignature("transfer", "address", "uint"), tokenRecipient.getAddress(), Integer.toString(trxValue));
        tx.sign(getAccount(tokensOwner.getAccountName()).getEcKey().getPrivKeyBytes());

        writer.write("{\"trx\": { \"sender\": \"" + tokensOwner.getAddress() + "\",");
        writer.write("\"nonce\": \""+ nonce + "\",");
        writer.write("\"receiver\": \"" + tokenRecipient.getAddress() + "\",");
        writer.write("\"token-amount\": \"" + trxValue + "\", ");
        writer.write("\"token-address\": \"" + tokenAddr+"\",");
        writer.write("\"tx-hash\": \"" + tx.getHash().toJsonString() + "\" ");
        writer.write("}},");

        return tx;
    }

    private Transaction generateTransaction(TransactionData data) {
        Transaction tx = null;

        int trxValue = valueGenerator.nextTrxAmount();

        boolean isNormalTrx = valueGenerator.nextTransferType(); //True currency transfer, false token transfer

        if (isNormalTrx) {
            if (normalTrx > 0) {

                BigInteger nonce = data.getFrom().nextNonce();

                tx = Transaction.create(
                        config, data.getTo().getAddress(),
                        BigInteger.valueOf(trxValue), nonce, minGasPrice, txGasLimit);

                Account account = getAccount(data.getFrom().getAccountName());
                tx.sign(account.getEcKey().getPrivKeyBytes());

                normalTrx--;

                writer.write("{\"trx\" : { \"sender\": \"" + data.getFrom().getAddress() + "\",");
                writer.write("\"nonce\": \""+ nonce+ "\",");
                writer.write("\"receiver\": \"" + data.getTo().getAddress() + "\",");
                writer.write("\"coin-amount\": \"" + trxValue + "\", ");
                writer.write("\"tx-hash\": \"" + tx.getHash().toJsonString() + "\" ");

                writer.write("}},");

            } else if (tokenTrx > 0) {

                //Randomly select the token contract

                RskAddress tokenAddr = tokens.get(valueGenerator.nextTokenContract());
                long nonce = data.getFrom().nextNonce().longValue();

                tx = CallTransaction.createCallTransaction(config, nonce, minGasPrice.longValue(), tokenGasLimit.longValue(),
                        tokenAddr, 0, CallTransaction.Function.fromSignature("transfer", "address", "uint"), data.getTo().getAddress(), Integer.toString(trxValue));

                Account account = getAccount(data.getFrom().getAccountName());
                tx.sign(account.getEcKey().getPrivKeyBytes());

                tokenTrx--;

                writer.write("{\"trx\": { \"sender\": \"" + data.getFrom().getAddress() + "\",");
                writer.write("\"nonce\": \""+ nonce + "\",");
                writer.write("\"receiver\": \"" + data.getTo().getAddress() + "\",");
                writer.write("\"token-amount\": \"" + trxValue + "\", ");
                writer.write("\"token-address\": \"" + tokenAddr+"\",");
                writer.write("\"tx-hash\": \"" + tx.getHash().toJsonString() + "\" ");
                writer.write("}},");


            }

        } else {
            if (tokenTrx > 0) {

                //Randomly select the token contract
                RskAddress tokenAddr = tokens.get(valueGenerator.nextTokenContract());
                long nonce = data.getFrom().nextNonce().longValue();

                tx = CallTransaction.createCallTransaction(config, nonce, minGasPrice.longValue(), tokenGasLimit.longValue(),
                        tokenAddr, 0, CallTransaction.Function.fromSignature("transfer", "address", "uint"), data.getTo().getAddress(), Integer.toString(trxValue));

                Account account = getAccount(data.getFrom().getAccountName());
                tx.sign(account.getEcKey().getPrivKeyBytes());

                tokenTrx--;

                writer.write("{\"trx\": { \"sender\": \"" + data.getFrom().getAddress() + "\",");
                writer.write("\"nonce\": \""+ nonce + "\",");
                writer.write("\"receiver\": \"" + data.getTo().getAddress() + "\",");
                writer.write("\"token-amount\": \"" + trxValue + "\", ");
                writer.write("\"token-address\": \"" + tokenAddr+"\",");
                writer.write("\"tx-hash\": \"" + tx.getHash().toJsonString() + "\" ");
                writer.write("}},");


            } else if (normalTrx > 0) {

                BigInteger nonce = data.getFrom().nextNonce();

                tx = Transaction.create(
                        config, data.getTo().getAddress(),
                        BigInteger.valueOf(trxValue), nonce, minGasPrice, txGasLimit);

                Account account = getAccount(data.getFrom().getAccountName());
                tx.sign(account.getEcKey().getPrivKeyBytes());
                normalTrx--;

                writer.write("{\"trx\" : { \"sender\": \"" + data.getFrom().getAddress() + "\",");
                writer.write("\"nonce\": \""+ nonce+ "\",");
                writer.write("\"receiver\": \"" + data.getTo().getAddress() + "\",");
                writer.write("\"coin-amount\": \"" + trxValue + "\", ");
                writer.write("\"tx-hash\": \"" + tx.getHash().toJsonString() + "\" ");

                writer.write("}},");


            }
        }

        return tx;
    }

    private Account getAccount(String accountName){

        if(accountCache.containsKey(accountName)){
            return accountCache.get(accountName);
        }

        byte[] privateKeyBytes = HashUtil.keccak256(accountName.getBytes());
        ECKey key = ECKey.fromPrivate(privateKeyBytes);
        Account account =  new Account(key);
        accountCache.put(accountName, account);
        return account;
    }



    private TransactionData selectParticipants(boolean minoritySubset) {
        int count = 0;
        int from, to;
        int rndMaxTries = 2000;

        if (minoritySubset) {
            from = valueGenerator.nextMinorityAccount();
            to = valueGenerator.nextMinorityAccount();
            while (from == to && count < rndMaxTries) {
                to = valueGenerator.nextMinorityAccount();
                count++;
            }
        } else {
            from = valueGenerator.nextMayorityAccount();
            to = valueGenerator.nextMayorityAccount();
            while (from == to && count < rndMaxTries) {
                to = valueGenerator.nextMayorityAccount();
                count++;
            }
        }

        if (count == rndMaxTries) return null;
        return new TransactionData(accounts.get(from), accounts.get(to));

    }


    final class TransactionData {
        private AccountStatus from;
        private AccountStatus to;

        TransactionData(AccountStatus from, AccountStatus to) {
            this.from = from;
            this.to = to;
        }

        public AccountStatus getFrom() {
            return this.from;
        }

        public AccountStatus getTo() {
            return this.to;
        }
    }

}
